Problem: httpsleetcode.comproblemsflood-fill
Time Complexity: O(N*N), where N*N is the number of pixels in the image. We might process every pixel.
Space Complexity: O(N*N), the size of the implicit call stack when calling dfs.
Code:
  vector<vector<int>> floodFills(vector<vector<int>>& image, int sr, int sc, int newColor,int old,int r,int c)
    {
        if(image[sr][sc]!=old)
            return image;
        image[sr][sc]=newColor;
        if(sr+1<r ) floodFills(image,sr+1,sc,newColor,old,r,c);
        if(sr-1>=0) floodFills(image,sr-1,sc,newColor,old,r,c);
        if(sc+1<c ) floodFills(image,sr,sc+1,newColor,old,r,c);
        if(sc-1>=0) floodFills(image,sr,sc-1,newColor,old,r,c);
        return image;
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int oldColor=image[sr][sc];
        if(oldColor==newColor)
        return image;
        int r=image.size(),c=image[0].size();
        return floodFills(image,sr,sc,newColor,oldColor,r,c);
    }